PrepareAnnotationEnsembl(mart=ensembl, annotation_path=annotation_path_mm,
splice_matrix = FALSE, dbsnp = snp131, COSMIC = TRUE)
}
PrepareAnnotationEnsembl
if(retrieveReference_mm == TRUE){
cat("Retrieving annotation data\n")
ensembl = useMart(biomart="ensembl") # creates a Mart object
# listDatasets(ensembl) # view available datasets (optional)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmulatta_gene_ensembl", host="may2012.archive.ensembl.org")
PrepareAnnotationEnsembl(mart=ensembl, annotation_path=annotation_path_mm,
splice_matrix = FALSE, dnsnp="snp131")
}
if(retrieveReference_mm == TRUE){
cat("Retrieving annotation data\n")
ensembl = useMart(biomart="ensembl") # creates a Mart object
# listDatasets(ensembl) # view available datasets (optional)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmulatta_gene_ensembl", host="may2012.archive.ensembl.org")
PrepareAnnotationEnsembl(mart=ensembl, annotation_path=annotation_path_mm,
splice_matrix = FALSE, dbsnp="snp131")
}
if(retrieveReference_mm == TRUE){
cat("Retrieving annotation data\n")
ensembl = useMart(biomart="ensembl") # creates a Mart object
# listDatasets(ensembl) # view available datasets (optional)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmulatta_gene_ensembl", host="may2012.archive.ensembl.org")
PrepareAnnotationEnsembl(mart=ensembl, annotation_path=annotation_path_mm,
splice_matrix = FALSE, dbsnp="131")
}
load(system.file("extdata/refseq", "dbsnpinCoding.RData", package="customProDB"))
PrepareAnnotationEnsembl
message("Prepare dbSNP information (dbsnpinCoding.RData) ... ",
appendLF = FALSE)
ucscTableQuery
ucscTableQuery
??    if (!is.null(dbsnp)) {
message("Prepare dbSNP information (dbsnpinCoding.RData) ... ",
appendLF = FALSE)
if (length(dbsnps) == 1 && dbsnps == "snp128") {
dbsnp_query <- ucscTableQuery(session, dbsnps[dbsnp],
table = "snp128")
}
else {
dbsnp_query <- ucscTableQuery(session, dbsnps[dbsnp],
table = paste(dbsnps[dbsnp], "CodingDbSnp", sep = ""))
}
snpCodingTab <- getTable(dbsnp_query)
snpCodingTab[, "chrom"] <- gsub("chr", "", snpCodingTab[,
"chrom"])
chrlist <- paste(c(seq(1:22), "X", "Y"))
snpCoding <- subset(snpCodingTab, chrom %in% chrlist,
select = c(chrom:name, alleleCount, alleles))
snpCoding <- unique(snpCoding)
snpCoding <- GRanges(seqnames = snpCoding[, "chrom"],
ranges = IRanges(start = snpCoding[, "chromStart"],
end = snpCoding[, "chromEnd"]), strand = "*",
rsid = snpCoding[, "name"], alleleCount = snpCoding[,
"alleleCount"], alleles = snpCoding[, "alleles"])
transGrange_snp <- transGrange
dbsnpinCoding <- subsetByOverlaps(snpCoding, transGrange_snp)
save(dbsnpinCoding, file = paste(annotation_path, "/dbsnpinCoding.RData",
sep = ""))
packageStartupMessage(" done")
}
??ucscTableQuery
PrepareAnnotationEnsembl
browserSession()
head(dbsnpinCoding)
head(dbsnpinCoding, n=100)
table(dbsnpinCoding["strand"])
table(dbsnpinCoding["strand",])
summary(dbsnpinCoding)
dbsnpinCoding[[1]]
dbsnpinCoding[1]
dbsnpinCoding[1]["strand"]
dbsnpinCoding[1]
if(retrieveReference_mm == TRUE){
cat("Retrieving annotation data\n")
ensembl = useMart(biomart="ensembl") # creates a Mart object
# listDatasets(ensembl) # view available datasets (optional)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmulatta_gene_ensembl", host="may2012.archive.ensembl.org")
PrepareAnnotationEnsembl(mart=ensembl, annotation_path=annotation_path_mm,
splice_matrix = FALSE, dbsnp=NULL, COSMIC=TRUE)
}
bampath <- system.file("extdata/bams", package="customProDB")
vcfFile_path <- system.file("extdata/vcfs",  package="customProDB")
annotation_path <- system.file("extdata/refseq", package="customProDB")
outfile_path <- "./"
outfile_path
outfile_name <- 'mult'
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=2, var_shar_num=2, outfile_path, outfile_name, INDEL=TRUE,
lablersid=TRUE, COSMIC=TRUE, nov_junction=FALSE)
bampath <- "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/"
vcfFile_path <- "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/"
outfile_path <- "./easy_test/"
outfile_name <- 'mult'
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=2, var_shar_num=2, outfile_path, outfile_name, INDEL=TRUE,
lablersid=TRUE, COSMIC=TRUE, nov_junction=FALSE)
easyRun_mul
?easyRun_mul
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=2, var_shar_num=1, outfile_path, outfile_name, INDEL=TRUE,
lablersid=TRUE, COSMIC=TRUE, nov_junction=FALSE)
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=2, var_shar_num=1, outfile_path, outfile_name, INDEL=TRUE,
lablersid=FALSE, COSMIC=FALSE, nov_junction=FALSE)
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=2, var_shar_num=1, outfile_path, outfile_name, INDEL=TRUE,
lablersid=FALSE, COSMIC=FALSE, nov_junction=FALSE)
easyRun_mul(bampath, RPKM_mtx=NULL, vcfFile_path, annotation_path, rpkm_cutoff=1,
share_num=1, var_shar_num=1, outfile_path, outfile_name, INDEL=TRUE,
lablersid=FALSE, COSMIC=FALSE, nov_junction=FALSE)
vignette("customProDB")
vcffile = "./updated_monkey_pxtx_paired.vcf"
vcf = InputVcf(vcffile)
require("customProDB")
vcf = InputVcf(vcffile)
getwd()
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
vcffile = "./updated_monkey_pxtx_paired.vcf"
vcf = InputVcf(vcffile)
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are indels
indelvcf <- vcf[[1]][index] # subset the object
index <- which(values(vcf[[1]])[['INDEL']]==FALSE)
SNVvcf <- vcf[[1]][index]
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are indels
index <- which(values(vcf[[1]])[['INDEL']]==FALSE)
SNVvcf <- vcf[[1]][index]
load(paste(annotation_path_mm, "ids.RData", sep=""))
txdb <- loadDb(paste(annotation_path_mm, "txdb.sqlite", sep=""))
head(txdb[.chrom])
SNVloc <- Varlocation(SNVvcf,txdb,ids)
View(SNVloc)
table(SNVloc$chr)
table(SNVloc$location)
indelloc <- Varlocation(indelvcf,txdb,ids)
table(SNVloc[,'location'])
load("exon_anno.RData")
postable_indel <- Positionincoding(indelvcf, exon)
View(exon)
exon$chromosome_name = paste("chr", exon$chromosome_name, sep = "")
postable_indel <- Positionincoding(indelvcf, exon)
View(exon)
postable_indel <- Positionincoding(indelvcf, exon, na.rm=TRUE)
vignette("customProDB")
require("customProDB")
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
annotation_path_hs = "./"
retrieveReference_hs = FALSE
pepfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_proseq.fasta"
CDSfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_codingseq.fasta"
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = TRUE, COSMIC = TRUE
)
vignette("customProDB")
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp131", COSMIC = TRUE
)
PrepareAnnotationRefseq
vignette("customProDB")
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp135", COSMIC = TRUE
)
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp130", COSMIC = TRUE
)
?dbBegin
version(bioc)
version()
version
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
biocLite("BiocUpgrade")
library(rtracklayer)
session = browserSession()
genome(session) = 'hg19'
tmp = trackNames(session)
tmp[grep('snp', tmp)]
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp138", COSMIC = TRUE
)
library("customProDB")
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp138", COSMIC = TRUE
)
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp138", COSMIC = TRUE
)
require("customProDB")
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
annotation_path_hs = "./"
pepfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_proseq.fasta"
CDSfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_codingseq.fasta"
cat("Loading customProDB function...\n")
run_customProDB = function(annotation_path="./", outfile="custom.fasta", singleSample = TRUE, path_to_sample="./", correct_chr_name=FALSE){
# Load annotation data
cat("Loading annotation data...\n")
load(paste(annotation_path, "exon_anno.RData", sep = ""))
load(paste(annotation_path, "ids.RData",       sep = ""))
load(paste(annotation_path, "proseq.RData",    sep = ""))
# re-map chromosome names to match BAM file
# (optional: typically required for Ensembl, not for UCSC)
if (correct_chr_name == TRUE) {
cat("Correcting chromosome name...\n")
exon$chromosome_name = paste("chr", exon$chromosome_name, sep = "")
}
outf1 = paste(annotation_path, outfile, sep='')
if (singleSample == TRUE) {
cat("Filtering single sample on RPKM...\n")
bamFile = path_to_sample
RPKM = calculateRPKM(bamFile, exon, proteincodingonly=TRUE, ids)
Outputproseq(RPKM, 1, proteinseq, outf1, ids) # for single sample
} else if (singleSample == FALSE) {
cat("Filtering multiple samples on RPKM...\n")
# Load all bam files within one directory
bamFiles = paste(path_to_sample,
list.files(path_to_sample, pattern = "*.bam$"), sep="")
RPKMs = sapply(bamFiles, function(x)
calculateRPKM(x, exon, proteincodingonly = TRUE, ids)
)
# for multiple samples
OutputsharedPro(RPKMs, cutoff=1, share_sample=2, proteinseq, outf1, ids)
}
}
cat("Completed loading customProDB function...\n")
run_customProDB(annotation_path= annotation_path_hs,
outfile="hs_multiple_sample_CustomProDB.fasta", singleSample=FALSE,
correct_chr_name=FALSE,
path_to_sample="~/Work/1_Milk/RNA-Seq_Guided_Proteomics/BAMs/Human/")
vcffile = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/human_pxtx_paired.vcf"
vcf = InputVcf(vcffile)
vcf[[1]][1:3]
if (table(values(vcf[[1]])[['INDEL']])[2] < 5) {
cat("Warning: less than 5 INDELs check VCF for quality\n")
}
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are
indelvcf <- vcf[[1]][index] # subset the object
index <- which(values(vcf[[1]])[['INDEL']]==FALSE)
SNVvcf <- vcf[[1]][index]
load(paste(annotation_path_hs, "ids.RData", sep=""))
txdb <- loadDb(paste(annotation_path_mm, "txdb.sqlite", sep=""))
txdb <- loadDb(paste(annotation_path_hs, "txdb.sqlite", sep=""))
SNVloc <- Varlocation(SNVvcf,txdb,ids)
table(SNVloc$location)
indelloc <- Varlocation(indelvcf,txdb,ids)
table(SNVloc[,'location'])
table(indelloc[,'location'])
load("exon_anno.RData")
postable_indel <- Positionincoding(indelvcf, exon)
vignette("customProDB")
table(SNVloc$location)
load("dbsnpinCoding.RData")
load("cosmic.RData")
postable_snv <- Positionincoding(SNVvcf, exon, dbsnpinCoding, COSMIC=cosmic)
postable_snv
head(postable_snv)
postable_indel <- Positionincoding(indelvcf, exon)
head(postable_indel)
load("procodingseq.RData")
txlist <- unique(postable_snv[, 'txid'])
txlist
codingseq <- procodingseq[procodingseq[, 'tx_id'] %in% txlist,]
codingseq
mtab <- aaVariation (postable_snv, codingseq)
head(mtab)
table(mtab$aavar)
outfile <- "./aberrant_human.fasta"
outfile <- "aberrant_human.fasta"
load("proseq.RData")
OutputVarproseq(mtab, proteinseq, outfile, ids)
?OutputVarproseq
txlist_indel <- unique(postable_indel[, 'txid'])
codingseq_indel <- procodingseq[procodingseq[, 'tx_id'] %in% txlist_indel, ]
outfile <- "snv_human.fasta"
OutputVarproseq(mtab, proteinseq, outfile, ids)
txlist_indel <- unique(postable_indel[, 'txid'])
codingseq_indel <- procodingseq[procodingseq[, 'tx_id'] %in% txlist_indel, ]
?Outputaberrant
outfile <- "indel_human.fasta"
Outputaberrant(postable_indel, coding=codingseq_indel,
proteinseq=proteinseq, outfile=outfile, ids=ids)
Outputaberrant(postable_indel, coding=codingseq_indel,
proteinseq=proteinseq,
+                         outfile=outfile, ids=ids)
Outputaberrant(postable_indel, coding=codingseq_indel, proteinseq=proteinseq,
+                         outfile=outfile, ids=ids)
Outputaberrant(postable_indel,
coding=codingseq_indel,
proteinseq=proteinseq,
outfile=outfile, ids=ids)
table(values(vcf[[1]])[['INDEL']])
library("customProDB")
table(values(vcf[[1]])[['INDEL']])
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are indels
indelvcf <- vcf[[1]][index] # subset the object
indelvcf
index <- which(values(vcf[[1]])[['INDEL']]==FALSE)
SNVvcf <- vcf[[1]][index]
load(paste(annotation_path_hs, "ids.RData", sep=""))
txdb <- loadDb(paste(annotation_path_hs, "txdb.sqlite", sep=""))
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
annotation_path_hs = "./"
load(paste(annotation_path_hs, "ids.RData", sep=""))
txdb <- loadDb(paste(annotation_path_hs, "txdb.sqlite", sep=""))
SNVloc <- Varlocation(SNVvcf,txdb,ids)
table(SNVloc$location)
indelloc <- Varlocation(indelvcf,txdb,ids)
table(indelloc[,'location'])
load("exon_anno.RData")
load("dbsnpinCoding.RData")
load("cosmic.RData")
postable_snv <- Positionincoding(SNVvcf, exon, dbsnpinCoding, COSMIC=cosmic)
View(postable_snv)
postable_indel <- Positionincoding(indelvcf, exon)
View(postable_indel)
load("procodingseq.RData")
txlist <- unique(postable_snv[, 'txid'])
codingseq <- procodingseq[procodingseq[, 'tx_id'] %in% txlist,]
mtab <- aaVariation(postable_snv, codingseq)
View(mtab)
table(mtab$varcode)
table(mtab$vartype)
outfile <- "snv_human.fasta"
load("proseq.RData")
OutputVarproseq(mtab, proteinseq, outfile, ids)
txlist_indel <- unique(postable_indel[, 'txid'])
txlist_indel
codingseq_indel <- procodingseq[procodingseq[, 'tx_id'] %in% txlist_indel, ]
codingseq_indel
outfile <- "indel_human.fasta"
Outputaberrant(postable_indel,
coding=codingseq_indel, # there are 5 less than postable_indel
proteinseq=proteinseq,
outfile=outfile, ids=ids)
Outputaberrant
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are indels
index <- which(values(vcf[[1]])[['INDEL']]==TRUE)
sessionInfo()
library("customProDB")
sessionInfo()
source("http://bioconductor.org/biocLite.R")
biocLite("customProDB")
sessionInfo()
biocLite("customProDB")
library("customProDB")
sessionInfo()
source("http://bioconductor.org/biocLite.R")
biocLite("customProDB")
library("customProDB")
sessionInfo()
require("customProDB")
setwd("~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/")
annotation_path_hs = "./"
pepfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_proseq.fasta"
CDSfasta = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/Make_FASTA_customProDB/Human/hg19_GRCh37_codingseq.fasta"
PrepareAnnotationRefseq(genome='hg19', CDSfasta, pepfasta,
annotation_path=annotation_path_hs,
splice_matrix = FALSE, dbsnp = "snp138", COSMIC = TRUE
)
run_customProDB = function(annotation_path="./", outfile="custom.fasta", singleSample = TRUE, path_to_sample="./", correct_chr_name=FALSE){
# Load annotation data
cat("Loading annotation data...\n")
load(paste(annotation_path, "exon_anno.RData", sep = ""))
load(paste(annotation_path, "ids.RData",       sep = ""))
load(paste(annotation_path, "proseq.RData",    sep = ""))
# re-map chromosome names to match BAM file
# (optional: typically required for Ensembl, not for UCSC)
if (correct_chr_name == TRUE) {
cat("Correcting chromosome name...\n")
exon$chromosome_name = paste("chr", exon$chromosome_name, sep = "")
}
outf1 = paste(annotation_path, outfile, sep='')
if (singleSample == TRUE) {
cat("Filtering single sample on RPKM...\n")
bamFile = path_to_sample
RPKM = calculateRPKM(bamFile, exon, proteincodingonly=TRUE, ids)
Outputproseq(RPKM, 1, proteinseq, outf1, ids) # for single sample
} else if (singleSample == FALSE) {
cat("Filtering multiple samples on RPKM...\n")
# Load all bam files within one directory
bamFiles = paste(path_to_sample,
list.files(path_to_sample, pattern = "*.bam$"), sep="")
RPKMs = sapply(bamFiles, function(x)
calculateRPKM(x, exon, proteincodingonly = TRUE, ids)
)
# for multiple samples
OutputsharedPro(RPKMs, cutoff=1, share_sample=2, proteinseq, outf1, ids)
}
}
cat("Completed loading customProDB function...\n")
run_customProDB(annotation_path= annotation_path_hs,
outfile="hs_multiple_sample_CustomProDB.fasta", singleSample=FALSE,
correct_chr_name=FALSE,
path_to_sample="~/Work/1_Milk/RNA-Seq_Guided_Proteomics/BAMs/Human/")
vcffile = "~/Work/1_Milk/RNA-Seq_Guided_Proteomics/VariantCalling/human_pxtx_paired.vcf"
vcf = InputVcf(vcffile)
if (table(values(vcf[[1]])[['INDEL']])[2] < 5) {
cat("Warning: less than 5 INDELs check VCF for quality\n")
}
table(values(vcf[[1]])[['INDEL']])
index <- which(values(vcf[[1]])[['INDEL']]==TRUE) # get rows that are indels
indelvcf <- vcf[[1]][index] # subset the object
index <- which(values(vcf[[1]])[['INDEL']]==FALSE)
SNVvcf <- vcf[[1]][index]
load(paste(annotation_path_hs, "ids.RData", sep=""))
txdb <- loadDb(paste(annotation_path_hs, "txdb.sqlite", sep=""))
SNVloc <- Varlocation(SNVvcf,txdb,ids)
table(SNVloc$location)
indelloc <- Varlocation(indelvcf,txdb,ids)
table(indelloc[,'location'])
load("exon_anno.RData")
load("dbsnpinCoding.RData")
load("cosmic.RData")
postable_snv <- Positionincoding(SNVvcf, exon, dbsnpinCoding, COSMIC=cosmic)
postable_indel <- Positionincoding(indelvcf, exon)
load("procodingseq.RData")
txlist <- unique(postable_snv[, 'txid'])
codingseq <- procodingseq[procodingseq[, 'tx_id'] %in% txlist,]
mtab <- aaVariation(postable_snv, codingseq)
table(mtab$vartype) # 1259 non-synonymous changes
outfile <- "snv_human.fasta"
load("proseq.RData")
OutputVarproseq(mtab, proteinseq, outfile, ids)
txlist_indel <- unique(postable_indel[, 'txid'])
codingseq_indel <- procodingseq[procodingseq[, 'tx_id'] %in% txlist_indel, ]
# there are 30 out of the 35 indels (this number is down from previous ~1500, why?)
outfile <- "indel_human.fasta"
Outputaberrant(postable_indel,
coding=codingseq_indel, # there are 5 less than postable_indel
proteinseq=proteinseq,
outfile=outfile, ids=ids)
warnings()
sessionInfo()
session = sessionInfo()
session
session["otherPkgs"]
session$otherPkgs$customProDB
tmp = session$otherPkgs$customProDB
session$otherPkgs$customProDB$Version
class(session$otherPkgs$customProDB$Version)
class(as.numeric(session$otherPkgs$customProDB$Version))
tmp = as.numeric(session$otherPkgs$customProDB$Version)
tmp
session$otherPkgs$customProDB$Version
strsplit(session$otherPkgs$customProDB$Version)
strsplit(session$otherPkgs$customProDB$Version, ".")
strsplit(".", session$otherPkgs$customProDB$Version)
require("stringr")
str_split(session$otherPkgs$customProDB$Version, ".")
session$otherPkgs$customProDB$Version
str_split(as.character(session$otherPkgs$customProDB$Version), ".")
str_split(session$otherPkgs$customProDB$Version, "\\.")
customProDBVersion = str_split(session$otherPkgs$customProDB$Version, "\\.")
if(customProDBVersion[1] > 1 & customProDBVersion[2] > 8 & customProDBVersion[2]) {
message("Modern version of customProDB...\nContinue...\n")
}
if(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2) {
message("Modern version of customProDB...\nContinue...\n")
}
customProDBVersion[1]
customProDBVersion = as.numeric(str_split(session$otherPkgs$customProDB$Version, "\\."))
as.numeric(customProDBVersion)
customProDBVersion = unlist(str_split(session$otherPkgs$customProDB$Version, "\\."))
customProDBVersion
if(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2) {
message("Modern version of customProDB...\nContinue...\n")
}
if !(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2) {
message("Modern version of customProDB...\nContinue...\n")
}
if !(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2) {
message("Modern version of customProDB...\nContinue...\n")
}
if(!(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2)) {
message("Modern version of customProDB...\nContinue...\n")
}
if(!(customProDBVersion[1] >= 1 & customProDBVersion[2] >= 8 & customProDBVersion[2] >= 2)) {
message("Please upgrade customProDB to version 1.8.2 or greater\n")
}
sessionInfo()
session = sessionInfo()
session$otherPkgs$customProDB$Version
str_split(session$otherPkgs$customProDB$Version, "\\.")
customProDBVersion = unlist(str_split(session$otherPkgs$customProDB$Version, "\\."))
customProDBVersion
version(customProDBVersion)
version(customProDB)
version("customProDB")
version()
packageDescription("customProDB")
packageDescription("customProDB")$Version
packageDescription("customProDB")$Version
customProDBVersion = unlist(str_split(packageDescription("customProDB")$Version, "\\."))
customProDBVersion
customProDBVersion = str_split(packageDescription("customProDB")$Version, "\\.")
customProDBVersion
customProDBVersion = str_split(packageDescription("customProDB")$Version, "\\.")
customProDBVersion
customProDBVersion = unlist(str_split(packageDescription("customProDB")$Version, "\\."))
customProDBVersion
history()
tmp = history()
